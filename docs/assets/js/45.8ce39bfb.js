(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{216:function(n,e,t){"use strict";t.r(e);var a=t(0),i=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("h3",{attrs:{id:"递归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归","aria-hidden":"true"}},[n._v("#")]),n._v(" 递归")]),n._v(" "),t("h4",{attrs:{id:"_1，定义：编程语言中，函数func-type-a-……-直接或间接调用函数本身，则该函数称为递归函数。递归函数不能定义为内联函数。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1，定义：编程语言中，函数func-type-a-……-直接或间接调用函数本身，则该函数称为递归函数。递归函数不能定义为内联函数。","aria-hidden":"true"}},[n._v("#")]),n._v(" 1，定义：编程语言中，函数Func(Type a,……)直接或间接调用函数本身，则该函数称为递归函数。递归函数不能定义为内联函数。")]),n._v(" "),t("h4",{attrs:{id:"案例："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例：","aria-hidden":"true"}},[n._v("#")]),n._v(" 案例：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('   // 1.请用递归的方式遍历树形数据结构中的每一个节点\n        const options = [\n                {\n                    value: \'zhejiang\',\n                    label: \'Zhejiang\',\n                    children: [\n                    {\n                        value: \'hangzhou\',\n                        label: \'Hangzhou\',\n                        children: [\n                        {\n                            value: \'xihu\',\n                            label: \'West Lake\'\n                        }\n                        ]\n                    }\n                    ]\n                },\n                {\n                    value: \'jiangsu\',\n                    label: \'Jiangsu\',\n                    children: [\n                    {\n                        value: \'nanjing\',\n                        label: \'Nanjing\',\n                        children: [\n                        {\n                            value: \'zhonghuamen\',\n                            label: \'Zhong Hua Men\'\n                        }\n                        ]\n                    }\n                    ]\n                }\n];\nfunction diffOption(opt){\n    for(let i =0;i<opt.length;i++){\n        if(opt[i].children){\n           console.log(opt[i])\n            diffOption(opt[i].children)\n        }else{\n            console.log(opt[i])\n        }\n    }\n}\n\ndiffOption(options)\n// 将类似以下JSON表示的树状结构(可以无限层级)通过parseDOM函数(使用document.createElement,\n//  document.createTextNode,appendChild等方法)生成一颗DOM树(返回一个element元素)\n\n const JsonTree = {\n        "tagName": "ul",\n        "props": {\n            "className": "list",\n            "data-name": "jsontree"\n        },\n        "children": [{\n                "tagName": "li",\n                "children": [{\n                    "tagName": "img",\n                    "props": {\n                        "src": "https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2153937626,1074119156&fm=27&gp=0.jpg",\n                        "width": "160px"\n                    }\n                }]\n            },\n            {\n                "tagName": "li",\n                "children": [{\n                    "tagName": "a",\n                    "props": {\n                        "href": "https://www.aliyun.com",\n                        "target": "_blank"\n                    },\n                    "children": "阿里云"\n                }]\n            }\n        ]\n    };\n\nfunction parseDOM(tree){\n    let {props,children,tagName} = tree;\n    let ul = document.createElement(tagName)\n    for(let i in props){\n        ul[i]=props[i]\n        if(i==\'width\'){\n            ul.style[i]=props[i]\n        }\n    }\n    if(children&&typeof(children)==\'object\'){\n        for(let i =0;i<children.length;i++){\n         ul.appendChild(parseDOM(children[i]))\n         \n        }\n    }else{\n        ul.appendChild(document.createTextNode(children))\n    }\n   \n    return ul\n}\ndocument.body.appendChild(parseDOM(JsonTree))\n')])])])])}],!1,null,null,null);e.default=i.exports}}]);